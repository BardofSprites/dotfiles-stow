#!/bin/bash

#### WEATHER
url="${WTTRURL:-wttr.in}"
weatherreport="${XDG_CACHE_HOME:-$HOME/.cache}/weatherreport"

getforecast() { curl -sf "$url/Louisville?M" > "$weatherreport" || exit 1; }

checkforecast() {
    [ -s "$weatherreport" ] && [ "$(stat -c %y "$weatherreport" 2>/dev/null |
        cut -d' ' -f1)" = "$(date '+%Y-%m-%d')" ]
}

getprecipchance() {
    echo "$weatherdata" | sed '16q;d' |
        grep -wo "[0-9]*%" |
        sort -rn |
        head -1q
}

getdailyhighlow() {
    echo "$weatherdata" | sed '13q;d' |
        grep -o "m\\([-+]\\)*[0-9]\\+" |
        sed 's/[+m]//g' |
        sort -g |
        sed -e 1b -e '$!d'
}

readfile() { weatherdata="$(cat "$weatherreport")" ;}

showweather() {
    checkforecast || getforecast
    readfile
    printf "☔%s 🥶%s°C 🌞%s°C" "$(getprecipchance)" $(getdailyhighlow)
}

#### CLOCK
clock=$(date '+%I')

case "$clock" in
    "00") clockicon="🕛" ;;
    "01") clockicon="🕐" ;;
    "02") clockicon="🕑" ;;
    "03") clockicon="🕒" ;;
    "04") clockicon="🕓" ;;
    "05") clockicon="🕔" ;;
    "06") clockicon="🕕" ;;
    "07") clockicon="🕖" ;;
    "08") clockicon="🕗" ;;
    "09") clockicon="🕘" ;;
    "10") clockicon="🕙" ;;
    "11") clockicon="🕚" ;;
    "12") clockicon="🕛" ;;
esac

calendar_icon="📅"

showclock () {
  printf "%s" $(date "+$calendar_icon %Y-%m-%d (%a) $clockicon %R:%S")
}

#### BATTERY
showbattery () {
    for battery in /sys/class/power_supply/BAT?*; do
    [ -n "${capacity+x}" ] && printf " "
    case "$(cat "$battery/status" 2>&1)" in
        "Full") status="⚡" ;;
        "Discharging") status="🔋" ;;
        "Charging") status="🔌" ;;
        "Not charging") status="🛑" ;;
        "Unknown") status="♻️" ;;
        *) exit 1 ;;
    esac
    capacity="$(cat "$battery/capacity" 2>&1)"
    [ "$status" = "🔋" ] && [ "$capacity" -le 25 ] && warn="❗"
    printf "%s%s%d%%" "$status" "$warn" "$capacity"; unset warn
    done
}

#### NETWORK
# Wifi
if [ "$(cat /sys/class/net/w*/operstate 2>/dev/null)" = 'up' ] ; then
	wifiicon="$(awk '/^\s*w/ { print "📶", int($3 * 100 / 70) "% " }' /proc/net/wireless)"
elif [ "$(cat /sys/class/net/w*/operstate 2>/dev/null)" = 'down' ] ; then
	[ "$(cat /sys/class/net/w*/flags 2>/dev/null)" = '0x1003' ] && wifiicon="📡 " || wifiicon="❌ "
fi

# Ethernet
[ "$(cat /sys/class/net/e*/operstate 2>/dev/null)" = 'up' ] && ethericon="🌐" || ethericon="❎"

# TUN
[ -n "$(cat /sys/class/net/tun*/operstate 2>/dev/null)" ] && tunicon=" 🔒"

shownetwork() {
    printf "%s%s%s" "$wifiicon" "$ethericon" "$tunicon"
}

#### MUSIC

truncate() {
    echo "$1" | cut -c1-15
}

# Get current track info
artist="$(playerctl metadata artist 2>/dev/null || echo "none")"
title="$(playerctl metadata title 2>/dev/null || echo "none")"

# Truncate artist and title to 15 characters
truncated_artist=$(truncate "$artist")
truncated_title=$(truncate "$title")

# Format the output as "artist - title"
current_track="$truncated_artist - $truncated_title"

playerstatus=$(playerctl status)

case "$playerstatus" in
    "Playing") playericon="🎵" ;;
    "Paused") playericon="⏸️" ;;
    "Stopped") playericon="⏹️" ;;
    "*") playericon="" ;;
esac

# Print the current track
showmusic () {
    echo "$playericon $current_track"
}

#### MEMORY
showmemory () {
    free --mebi | sed -n '2{p;q}' | awk '{printf ("🧠%2.2fGiB/%2.2fGiB\n", ( $3 / 1024), ($2 / 1024))}'
}

#### VOLUME

mutestatus="pactl list sinks | grep -q 'Mute: yes' && echo $?"

case "$mutestatus" in
    0)
        soundicon="🔊" ;;
    *)
        soundicon="🔇" ;;
esac

showvolume() {
    volumeInput=$(pactl list sinks)
    currentVolume=$(echo "${volumeInput#*Sink #$sinkNumber}" | grep -E 'V.*-left' | grep -oE '[0-9]+%' | tail -n 1)
    printf "%s %s" $soundicon $currentVolume
}

#### CONCATENATION
echo -e $(showmemory) "|" $(showweather) "|" $(shownetwork) "|" $(showmusic) "|" $(showvolume) "|" $(showbattery) "|" $(showclock)
